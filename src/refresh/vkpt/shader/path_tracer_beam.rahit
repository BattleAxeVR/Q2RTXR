/*
Copyright (C) 2019, NVIDIA CORPORATION. All rights reserved.

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
*/

#version 460
#extension GL_GOOGLE_include_directive : enable

#include "path_tracer.h"
#include "path_tracer_transparency.glsl"
#include "utils.glsl"

#define GLOBAL_TEXTURES_DESC_SET_IDX 2
#include "global_textures.h"

#define VERTEX_BUFFER_DESC_SET_IDX 3
#define VERTEX_READONLY 1
#include "vertex_buffer.h"

layout(set = 0, binding = 2)
uniform textureBuffer beam_color_buffer;

rt_rayPayloadIn RayPayload ray_payload;
rt_hitAttribute HitAttributeBeam beam_hit_attrib;

void main()
{
	const float x = 1.0 - beam_hit_attrib.normalized_center_dist;
	const float factor = pow(clamp(x, 0.0, 1.0), global_ubo.pt_beam_softness);

	if (factor > 0.0)
	{
		const int particle_index = gl_PrimitiveID;
		vec4 color = texelFetch(beam_color_buffer, particle_index);

		color.a *= factor;
		color.rgb *= color.a;

		color.rgb *= global_ubo.prev_adapted_luminance * 20;

	    int texnum = global_ubo.current_frame_idx & (NUM_BLUE_NOISE_TEX - 1);
	    ivec2 texpos = ivec2(rt_LaunchID.xy) & ivec2(BLUE_NOISE_RES - 1);
	    float noise = texelFetch(TEX_BLUE_NOISE, ivec3(texpos, texnum), 0).r;
	    color.rgb *= noise * noise + 0.1;

		update_payload_transparency(ray_payload, color, rt_HitT);

	}

	rt_ignoreIntersection;
}
